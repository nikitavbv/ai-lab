syntax = "proto3";

package sandbox;

service SandboxService {
    // for ui
    rpc OAuthLogin(OAuthLoginRequest) returns (OAuthLoginResponse) {}
    rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {}
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}
    rpc GetAllTasks(GetAllTasksRequest) returns (GetAllTasksResponse) {}

    // for workers
    rpc GetTaskToRun(GetTaskToRunRequest) returns (GetTaskToRunResponse) {}
    rpc UpdateTaskStatus(UpdateTaskStatusRequest) returns (UpdateTaskStatusResponse) {}
}

/* common types */
message TaskId {
    string id = 1;
}

message Task {
    TaskId id = 4;
    string prompt = 1;

    oneof status {
        PendingTaskDetails pending_details = 5;
        InProgressTaskDetails in_progress_details = 2;
        FinishedTaskDetails finished_details = 3;
    }
}

message PendingTaskDetails {
}

message InProgressTaskDetails {
    uint32 current_step = 1;
    uint32 total_steps = 2;
}

message FinishedTaskDetails {
}

/* requests and responses */
message OAuthLoginRequest {
    string code = 1;
    string redirect_uri = 2;
}

message OAuthLoginResponse {
    string token = 1;
}

message CreateTaskRequest {
    string prompt = 1;

    uint32 iterations = 2;
}

message CreateTaskResponse {
    TaskId id = 1;
}

message GetTaskRequest {
    TaskId id = 1;
}

message GetTaskResponse {
    Task task = 1;
}

message GetAllTasksRequest {
}

message GetAllTasksResponse {
    repeated Task tasks = 1;
}

message GetTaskToRunRequest {
}

message GetTaskToRunResponse {
    message TaskToRun {
        TaskId id = 1;
        string prompt = 2;
    }

    optional TaskToRun task_to_run = 1;
}

message UpdateTaskStatusRequest {
    TaskId id = 1;

    oneof task_status {
        InProgressTaskDetails in_progress = 2;
        FinishedTaskDetails finished = 3;
    }

    optional bytes image = 4;
}

message UpdateTaskStatusResponse {
}